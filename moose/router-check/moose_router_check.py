#!/usr/bin/python2
#
# Code related to ESET's Linux/Moose research
# For feedback or questions contact us at: github@eset.com
# https://github.com/eset/malware-research/
#
# This code is provided to the community under the two-clause BSD license with
# additional disclaimer as follows:
#
# Copyright (C) 2015 ESET, spol. s r.o.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# THIS SOFTWARE SHALL BE USED EXCLUSIVELY WITH COMPUTERS AND DEVICES
# YOU HAVE LEGITIMATE ACCESS TO. THIS SOFTWARE DOES NOT PROMOTE HACKING OR
# CRACKING. PERFORMING SUCH ATTEMPTS OR TESTS SHALL BE BASED ON CONSENT
# OR PERMISSION FROM THE OWNER OF COMPUTER OR DEVICE. ANY ILLEGAL USE OR ACTIVITY
# IS STRICTLY FORBIDDEN AND SHALL BE REPORTED TO COMPETENT AUTHORITY.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE OR RESPONSIBLE
# FOR ANY ILLEGAL USE OR ACTIVITY CONDUCTED BY END USER.
#
# Thomas Dupuy <thomas.dupuy@eset.com>

import os
import re
import socket
import struct
import sys
import telnetlib

TIMEOUT = 5
credentials = [("admin", "admin"), ("root", "root"), ("root", "admin"), ("admin", "root"), ("root", "Admin"), ("admin", "Admin"), ("Alphanetworks", "wrgn49_dlob_dir300b5"), ("support", "support"), ("admin", "smcadmin"), ("admin", ""), ("root", ""), ("!root", ""), ("11111", "x-admin"), ("1234", "1234"), ("abc", "cascade"), ("adm", ""), ("admin", "_Cisco"), ("admin", "0"), ("admin", "123"), ("admin", "1234"), ("Admin", "123456"), ("admin", "1234admin"), ("admin", "2222"), ("admin", "3477"), ("admin", "3ascotel"), ("admin", "9999"), ("admin", "access"), ("admin", "adminttd"), ("admin", "adslolitec"), ("admin", "adslroot"), ("admin", "adtran"), ("admin", "asante"), ("admin", "ascend"), ("admin", "atc123"), ("admin", "atlantis"), ("admin", "backdoor"), ("admin", "barricade"), ("admin", "bintec"), ("admin", "BRIDGE"), ("admin", "comcomcom"), ("admin", "default"), ("admin", "enter"), ("admin", "epicrouter"), ("admin", "extendnet"), ("admin", "hello"), ("admin", "help"), ("admin", "Intel"), ("admin", "ironport"), ("admin", "isee"), ("admin", "letmein"), ("admin", "leviton"), ("admin", "michelangelo"), ("admin", "microbusiness"), ("admin", "mu"), ("admin", "my_DEMARC"), ("admin", "netadmin"), ("admin", "NetCache"), ("admin", "NetICs"), ("admin", "noway"), ("admin", "OCS"), ("admin", "P@55w0rd!"), ("admin", "PASSWORD"), ("admin", "passwort"), ("admin", "pento"), ("admin", "pfsense"), ("admin", "private"), ("admin", "public"), ("admin", "rmnetlm"), ("admin", "setup"), ("admin", "sitecom"), ("admin", "SMDR"), ("admin", "speedxess"), ("admin", "SUPER"), ("admin", "switch"), ("admin", "Symbol"), ("admin", "sysAdmin"), ("admin", "system"), ("admin", "TANDBERG"), ("admin2", "changeme"), ("Administrator", ""), ("Administrator", "admin"), ("ADMINISTRATOR", "ADMINISTRATOR"), ("Administrator", "changeme"), ("Administrator", "ganteng"), ("Administrator", "ggdaseuaimhrke"), ("Administrator", "password"), ("Administrator", "smcadmin"), ("adminstat", "OCS"), ("adminstrator", "changeme"), ("adminttd", "adminttd"), ("adminuser", "OCS"), ("adminview", "OCS"), ("ADMN", "admn"), ("ADSL", "expert03"), ("ADVMAIL", "HP"), ("ADVMAIL", "HPOFFICE DATA"), ("Alphanetworks", "wrgg15_di524"), ("ami", ""), ("Any", "12345"), ("apc", "apc"), ("bbsd-client", "changeme2"), ("bbsd-client", "NULL"), ("cablecom", "router"), ("ccrusr", "ccrusr"), ("cellit", "cellit"), ("cisc", ""), ("cisco", "cisco"), ("CISCO15", "otbu+1"), ("citel", "citel"), ("corecess", "corecess"), ("craft", ""), ("CSG", "SESAME"), ("cusadmin", "highspeed"), ("dadmin", "dadmin01"), ("davox", "davox"), ("debug", "d.e.b.u.g"), ("debug", "synnet"), ("deskalt", "password"), ("deskman", "changeme"), ("desknorm", "password"), ("deskres", "password"), ("diag", "danger"), ("diag", "switch"), ("disttech", "4tas"), ("D-Link", "D-Link"), ("draytek", "1234"), ("echo", "User"), ("Factory", "56789"), ("FIELD", "HPONLY"), ("FIELD", "HPP187 SYS"), ("FIELD", "HPWORD PUB"), ("FIELD", "LOTUS"), ("FIELD", "MANAGER"), ("FIELD", "MGR"), ("FIELD", "SERVICE"), ("FIELD", "SUPPORT"), ("GEN1", "gen1"), ("GEN2", "gen2"), ("guest", ""), ("guest", "guest"), ("guest", "User"), ("HELLO", "FIELD.SUPPORT"), ("HELLO", "MANAGER.SYS"), ("HELLO", "MGR.SYS"), ("HELLO", "OP.OPERATOR"), ("helpdesk", "OCS"), ("hsa", "hsadb"), ("HTTP", "HTTP"), ("iclock", "timely"), ("images", "images"), ("install", "secret"), ("installer", "installer"), ("intermec", "intermec"), ("IntraStack", "Asante"), ("IntraSwitch", "Asante"), ("l2", "l2"), ("l3", "l3"), ("login", "admin"), ("login", "password"), ("m1122", "m1122"), ("MAIL", "HPOFFICE"), ("MAIL", "MAIL"), ("MAIL", "MPE"), ("MAIL", "REMOTE"), ("MAIL", "TELESUP"), ("maint", "maint"), ("maint", "ntacdmax"), ("manage", "!manage"), ("Manager", ""), ("Manager", "Admin"), ("MANAGER", "COGNOS"), ("manager", "friend"), ("MANAGER", "HPOFFICE"), ("MANAGER", "ITF3000"), ("manager", "manager"), ("MANAGER", "SECURITY"), ("MANAGER", "SYS"), ("MANAGER", "TCH"), ("MANAGER", "TELESUP"), ("manuf", "xxyyzz"), ("MD110", "help"), ("mediator", "mediator"), ("MGR", "CAROLIAN"), ("MGR", "CCC"), ("MGR", "CNAS"), ("MGR", "COGNOS"), ("MGR", "CONV"), ("MGR", "HPDESK"), ("MGR", "HPOFFICE"), ("MGR", "HPONLY"), ("MGR", "HPP187"), ("MGR", "HPP189"), ("MGR", "HPP196"), ("MGR", "INTX3"), ("MGR", "ITF3000"), ("MGR", "NETBASE"), ("MGR", "REGO"), ("MGR", "RJE"), ("MGR", "ROBELLE"), ("MGR", "SECURITY"), ("MGR", "SYS"), ("MGR", "TELESUP"), ("MGR", "VESOFT"), ("MGR", "WORD"), ("MGR", "XLSERVER"), ("MICRO", "RSX"), ("mlusr", "mlusr"), ("monitor", "monitor"), ("NAU", "NAU"), ("netopia", "netopia"), ("netrangr", "attack"), ("netscreen", "netscreen"), ("NICONEX", "NICONEX"), ("nokai", "nokai"), ("nokia", "nokia"), ("operator", ""), ("operator", "1234"), ("OPERATOR", "COGNOS"), ("OPERATOR", "DISC"), ("operator", "operator"), ("OPERATOR", "SUPPORT"), ("OPERATOR", "SYS"), ("OPERATOR", "SYSTEM"), ("patrol", "patrol"), ("PCUSER", "SYS"), ("PRODDTA", "PRODDTA"), ("public", ""), ("radware", "radware"), ("readonly", "lucenttech2"), ("readwrite", "lucenttech1"), ("recovery", "recovery"), ("replicator", "replicator"), ("RMUser1", "password"), ("ro", "ro"), ("root", "1234"), ("root", "12345"), ("root", "3ep5w2u"), ("root", "admin_1"), ("root", "ascend"), ("root", "attack"), ("root", "blender"), ("root", "davox"), ("root", "default"), ("root", "fivranne"), ("root", "ggdaseuaimhrke"), ("root", "iDirect"), ("root", "Mau'dib"), ("root", "pass"), ("root", "password"), ("root", "tini"), ("root", "tslinux"), ("RSBCMON", "SYS"), ("rw", "rw"), ("rwa", "rwa"), ("scmadmin", "scmchangeme"), ("scout", "scout"), ("secret", "secret"), ("secure", "secure"), ("security", "security"), ("Service", "5678"), ("service", "smile"), ("setup", "changeme"), ("setup", "setup"), ("smc", "smcadmin"), ("SPOOLMAN", "HPOFFICE"), ("SSA", "SSA"), ("storwatch", "specialist"), ("stratacom", "stratauser"), ("super", "super"), ("super", "surt"), ("super.super", ""), ("super.super", "master"), ("superman", "talent"), ("superuser", ""), ("superuser", "123456"), ("superuser", "admin"), ("supervisor", "supervisor"), ("sysadm", "Admin"), ("sysadm", "anicust"), ("SYSADM", "sysadm"), ("sysadmin", "PASS"), ("sysadmin", "password"), ("SYSDBA", "masterkey"), ("target", "password"), ("teacher", "password"), ("tech", ""), ("tech", "tech"), ("telecom", "telecom"), ("tellabs", "tellabs#1"), ("temp1", "password"), ("tiger", "tiger123"), ("TMAR#HWMT8007079", ""), ("topicalt", "password"), ("topicnorm", "password"), ("topicres", "password"), ("User", ""), ("user", "password"), ("vcr", "NetVCR"), ("vt100", "public"), ("wlse", "wlsedb"), ("WP", "HPOFFICE"), ("write", "private"), ("xd", "xd")]

login_prompts = [
    re.compile(b"login", re.IGNORECASE),
    re.compile(b"user", re.IGNORECASE),
    re.compile(b"account", re.IGNORECASE)]
password_prompts = [re.compile(b"password", re.IGNORECASE)]
fail_prompts = [
    re.compile(b"incorrect", re.IGNORECASE),
    re.compile(b"invalid", re.IGNORECASE),
    re.compile(b"failed", re.IGNORECASE),
    re.compile(b"bad password", re.IGNORECASE),
    re.compile(b"login error", re.IGNORECASE),
    re.compile(b"password is wrong", re.IGNORECASE),
    re.compile(b"password:", re.IGNORECASE),
    re.compile(b"uthentication failed", re.IGNORECASE)]
echo_prompts = [re.compile(b"^test", re.MULTILINE)]


def get_default_gateway_mac():
    """Get the default gateway by using subprocess."""
    try:
        import subprocess
        command = "netstat -rn | grep 'default' | awk '{print $2}'"
        output = subprocess.check_output(command, shell=True)
        return output.split('\n')[0]
    except:
        return None


def get_default_gateway_linux():
    """Read the default gateway directly from /proc."""
    try:
        with open("/proc/net/route") as fh:
            for line in fh:
                fields = line.strip().split()
                if fields[1] != '00000000' or not int(fields[3], 16) & 2:
                    continue
                return socket.inet_ntoa(struct.pack("<L", int(fields[2], 16)))
    except:
        return None


def get_default_gateway_windows():
    """Use netifaces module to get the default gateway."""
    try:
        import netifaces
        gws = netifaces.gateways()
        return gws['default'][netifaces.AF_INET][0]
    except:
        return None


def checkTelnet(ip):
    for user, password in credentials:
        try:
            tn = telnetlib.Telnet(ip)
            print "[+] Using %s as router IP" % (ip)
            try:
                print "Testing %s:%s" % (user, password)

                login_response = tn.expect(login_prompts, timeout=TIMEOUT)
                if login_response[0] != -1:
                    tn.write(user + "\n")
                else:
                    raise RuntimeError("Login prompt was not received")

                password_response = tn.expect(password_prompts, timeout=TIMEOUT)
                if password_response[0] != -1:
                    tn.write(password + "\n")

                fail_response = tn.expect(fail_prompts, timeout=TIMEOUT)
                if fail_response[0] == -1:
                    test = "echo -n test"
                    tn.write(test + "\n")

                    echo_response = tn.expect(echo_prompts, timeout=TIMEOUT)
                    if echo_response[0] != -1:
                        print "[+] Telnet service of your router is accessible with default credentials."
                        print "[+] Change them and notify us: github@eset.com."
                        print "[+] For more information: https://github.com/eset/malware-research/tree/master/moose/targeted-vendors/"
                        return
            except (KeyboardInterrupt, SystemExit):
                raise
            except:
                continue
            finally:
                tn.close()
        except socket.error:
            print "[+] The connection to the Telnet service failed, perhaps the port is closed"
            return


def main(args):
    gateway = None
    if len(args) == 2:
        gateway = sys.argv[1]
    elif os.name == "nt":
        gateway = get_default_gateway_windows()
    elif "linux" in sys.platform:
        gateway = get_default_gateway_linux()
    elif "darwin" in sys.platform:
        gateway = get_default_gateway_mac()
    if gateway is None:
        print "[-] No gateway found!"
        exit(0)
    checkTelnet(gateway)
    raw_input("Press Enter to exit...")

if __name__ == "__main__":
    import textwrap
    print textwrap.dedent("""\
        Linux/Moose Router Checking Tool
        Copyright (C) 2015 ESET, spol. s r.o.

        This tool allows to test usernames and passwords of the Telnet service of your router. It tries the usernames and passwords from the Linux/Moose malware's list.

        Please be careful, this script does not clean the threat. If you think that your router is infected, rebooting it and changing your password should suffice to protect it. Keep in mind that Telnet is deprecated and that it should be disabled. Use SSH instead whenever possible.

        More information to further investigate the infection is available here: https://github.com/eset/malware-ioc/tree/master/moose#system-commands

        Cleaning and prevention advice is available here: http://www.welivesecurity.com/2015/05/26/dissecting-linuxmoose/

        By using this script you agree to terms and conditions of its license (visible in the script's source).\n""")

    raw_input("Press Enter to continue...")
    if len(sys.argv) > 2:
        sys.exit("Usage: %s [ip]" % (sys.argv[0]))
    main(sys.argv)
